USE DB.inventory;


-- 1. Total Sales
SELECT  SUM(SALESDOLLARS) AS total_sales
FROM    sales;

-- 2. Month over Month Sales
WITH monthlysales AS (  SELECT  MONTH(salesdate) AS month,
                                SUM(salesdollars) AS Monthly_sales,
                                LAG(SUM(salesdollars)) OVER (ORDER BY MONTH(salesdate)) AS       previous_month_sales
                        FROM    sales
                        GROUP BY MONTH(SALESDATE))
                        
SELECT  month, monthly_sales, previous_month_sales,
        ROUND(monthly_sales - previous_month_sales,2) AS sales_difference
FROM    monthlysales
ORDER BY month;

-- 3. Revenue Generated by each store
SELECT  store,
        ROUND(SUM(salesdollars)/1000000,2) AS Total_Sales_Millions
FROM    sales
GROUP BY store
ORDER BY store;

-- 4. Top 5 performing Stores (Using Dense_rank() to see ties also)
WITH store_sales AS (SELECT  store,
                             ROUND(SUM(salesdollars)/1000000,2) AS Total_Sales_in_Millions
                     FROM    sales
                     GROUP BY store)
SELECT  store, total_sales_in_Millions
FROM    (SELECT    store, total_sales_in_Millions, 
                   DENSE_RANK() OVER (ORDER BY total_sales_in_Millions DESC) AS ranking
         FROM      store_sales) temp
WHERE   ranking<=5;

-- 5. Sell Through rate, Total Products Purchased, Total Sold
WITH sold AS ( SELECT  brand,
                       description,
                       SUM(salesquantity) AS Quantity_sold
               FROM    sales
               GROUP BY 1,2),
                        
purchased AS ( SELECT  brand,
                       description,
                       SUM(quantity) as Quant_purch
               FROM    final_purchase
               GROUP BY 1,2)

SELECT  p.brand AS Brand,
        p.description AS Name,
        p.Quant_purch AS Quantity_purchase,
        s.Quantity_sold AS Quantity_sold,
        ROUND( (COALESCE(s.Quantity_sold, 0) / NULLIF(p.Quant_purch,0)) * 100, 2) AS Sell_Through
FROM    purchased p LEFT JOIN sold s
            ON p.brand = s.brand
ORDER BY 5, 3 DESC;


-- 6. Products With shelf life > 30 days
WITH store_purchase AS (SELECT  store,
                                brand,
                                description,
                                MAX(receivingdate) AS latest_purchase
                        FROM    final_purchase
                        GROUP BY 1,2,3),
                        
         Store_sale AS (SELECT  s.store,
                                s.brand,
                                MIN(s.salesdate) AS first_sale
                        FROM    sales s INNER JOIN store_purchase p 
                                    ON p.store = s.store 
                                    AND p.brand = s.brand 
                                    AND s.salesdate > p.latest_purchase
                        GROUP BY 1,2)
SELECT  p.store,
        p.brand,
        p.description,
        p.latest_purchase,
        s.first_Sale,
        DATEDIFF(DAY, p.latest_purchase, s.first_Sale) AS shelf_life_inDays
FROM    store_purchase p INNER JOIN store_sale s
            ON p.store = s.store 
            AND p.brand = s.brand
WHERE   DATEDIFF(DAY, p.latest_purchase, s.first_Sale) > 30
ORDER BY 1,6 DESC;

-- 7. Holding cost on Dead Stock
WITH sold AS ( SELECT  brand,
                       description,
                       SUM(salesquantity) AS Quantity_sold
               FROM    sales
               GROUP BY 1,2),
                        
purchased AS ( SELECT  brand,
                       description,
                       purchaseprice,
                       SUM(quantity) as Quant_purch
               FROM    final_purchase
               GROUP BY 1,2,3),

Zero_sales AS ( SELECT  p.brand AS Brand,
                        p.description AS Name,
                        p.purchaseprice as price,
                        p.Quant_purch AS Quantity_purchase,
                        s.Quantity_sold AS Quantity_sold,
                        ROUND( (COALESCE(s.Quantity_sold, 0) / NULLIF(p.Quant_purch,0)) * 100, 2) AS Sell_Through
                FROM    purchased p LEFT JOIN sold s
                            ON p.brand = s.brand 
                WHERE   COALESCE(s.Quantity_sold, 0)= 0)
                
SELECT      SUM(Quantity_purchase * price) as Dead_stock_amount
FROM        zero_sales;
